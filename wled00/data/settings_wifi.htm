<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
	<meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport">
	<title>Setari WiFi</title>
	<script src="common.js" async type="text/javascript"></script>
	<script>
		var scanLoops = 0, preScanSSID = "";
		var maxNetworks = 3;
		function N() {
			const button = gId("scan");
			button.disabled = true;
			button.textContent = "Scanning...";

			fetch(getURL("/json/net")).then((response) => {
				return response.json();
			}).then((json) => {
				// Get the list of networks only, defaulting to an empty array.
				return Object.assign(
					{},
					{"networks": []},
					json,
				).networks.sort(
					// Sort by signal strength, descending.
					(a, b) => b.rssi - a.rssi
				).reduce(
					// Filter out duplicate SSIDs. Since it is sorted by signal
					// strength, the strongest signal will be kept in the
					// order it as originally appeared in the array.
					(unique, other) => {
						if(!unique.some(obj => obj.ssid === other.ssid)) {
							unique.push(other);
						}
						return unique;
					},
					[],
				);
			}).then((networks) => {
				// If there are no networks, fetch it again in a second.
				// but only do this a few times.
				if (networks.length === 0 && scanLoops < 10) {
					scanLoops++;
					setTimeout(N, 1000);
					return;
				}
				scanLoops = 0;

				if (networks.length > 0) {
					let cs = d.querySelectorAll("#wifi_entries input[type=text]");
					for (let input of (cs||[])) {
						let found = false;
						let select = cE("select");
						select.id = input.id;
						select.name = input.name;
						select.setAttribute("onchange", "T(this)");
						preScanSSID = input.value;

						for (let i = 0; i < select.children.length; i++) {
							select.removeChild(select.children[i]);
						}

						for (let i = 0; i < networks.length; i++) {
							const option = cE("option");

							option.setAttribute("value", networks[i].ssid);
							option.textContent = `${networks[i].ssid} (${networks[i].rssi} dBm)`;

							if (networks[i].ssid === input.value) {
								option.setAttribute("selected", "selected");
								found = true;
							}

							select.appendChild(option);
						}
						const option = cE("option");

						option.setAttribute("value", "!Cs");
						option.textContent = "Other network...";
						select.appendChild(option);

						if (input.value === "" || input.value === "Your_Network" || found) input.replaceWith(select);
						else select.remove(); 
					}
				}

				button.disabled = false;
				button.textContent = "Scan";
			});
		}
		// replace WiFi select with custom SSID input field again
		function T(cs) {
			if (!cs || cs.value != "!Cs") return;
			let input = cE("input");
			input.type = "text";
			input.id = cs.id;
			input.name = cs.name;
			input.setAttribute("maxlength",32);
			input.value = preScanSSID;
			cs.replaceWith(input);
		}
		function resetWiFi(maxN = undefined) {
			if (maxN) maxNetworks = maxN;
			let entries = gId("wifi_entries").children
			for (let i = entries.length; i > 0; i--) entries[i-1].remove();
			btnWiFi(0);
		}
		function btnWiFi(i) {
			gId("wifi_add").style.display = (i<maxNetworks) ? "inline":"none";
			gId("wifi_rem").style.display = (i>1) ? "inline":"none";
		}
		function addWiFi(ssid="",pass="",ip=0,gw=0,sn=0x00ffffff) { // little endian
			var i = gId("wifi_entries").childNodes.length;
			if (i >= maxNetworks) return;
			var b = `<div id="net${i}"><hr class="sml">
Network name (SSID${i==0?", empty to not connect":""}):<br><input type="text" id="CS${i}" name="CS${i}" maxlength="32" value="${ssid}" ${i>0?"required":""}><br>
Network password:<br><input type="password" name="PW${i}" maxlength="64" value="${pass}"><br>
Static IP (leave at 0.0.0.0 for DHCP)${i==0?"<br>Also used by Ethernet":""}:<br>
<input name="IP${i}0" type="number" class="s" min="0" max="255" value="${ip&0xFF}" required>.<input name="IP${i}1" type="number" class="s" min="0" max="255" value="${(ip>>8)&0xFF}" required>.<input name="IP${i}2" type="number" class="s" min="0" max="255" value="${(ip>>16)&0xFF}" required>.<input name="IP${i}3" type="number" class="s" min="0" max="255" value="${(ip>>24)&0xFF}" required><br>
Static gateway:<br>
<input name="GW${i}0" type="number" class="s" min="0" max="255" value="${gw&0xFF}" required>.<input name="GW${i}1" type="number" class="s" min="0" max="255" value="${(gw>>8)&0xFF}" required>.<input name="GW${i}2" type="number" class="s" min="0" max="255" value="${(gw>>16)&0xFF}" required>.<input name="GW${i}3" type="number" class="s" min="0" max="255" value="${(gw>>24)&0xFF}" required><br>
Static subnet mask:<br>
<input name="SN${i}0" type="number" class="s" min="0" max="255" value="${sn&0xFF}" required>.<input name="SN${i}1" type="number" class="s" min="0" max="255" value="${(sn>>8)&0xFF}" required>.<input name="SN${i}2" type="number" class="s" min="0" max="255" value="${(sn>>16)&0xFF}" required>.<input name="SN${i}3" type="number" class="s" min="0" max="255" value="${(sn>>24)&0xFF}" required></div>`;
			gId("wifi_entries").insertAdjacentHTML("beforeend", b);
			btnWiFi(i+1);
		}
		function remWiFi() {
			const entries = gId("wifi_entries").children;
			const i = entries.length;
			if (i < 2) return;
			entries[i-1].remove();
			btnWiFi(i-1);
		}
		function S() {
			getLoc();
			loadJS(getURL('/settings/s.js?p=1'), false);	// If we set async false, file is loaded and executed, then next statement is processed
			if (loc) d.Sf.action = getURL('/settings/wifi');
		}
	</script>
	<style>@import url("style.css");</style>
</head>
<body onload="S()">
	<form id="form_s" name="Sf" method="post">
		<div class="toprow">
		<div class="helpB"><button type="button" onclick="H('features/settings/#wifi-settings')">?</button></div>
		<button type="button" onclick="B()">Inapoi</button><button type="submit">Salvare & Conectare</button><hr>
		</div>
		<h2>Setari WiFi</h2>
		<h3>Conecteaza-te la retea</h3>
		<button type="button" id="scan" onclick="N()">Scan</button><br>
		<div id="wifi">
			Retele WiFi
			<div id="wifi_entries"></div>
			<hr class="sml">
			<button type="button" id="wifi_add" onclick="addWiFi()">+</button>
			<button type="button" id="wifi_rem" onclick="remWiFi()">-</button><br>
		</div>
		Adresa DNS:<br>
		<input name="D0" type="number" class="s" min="0" max="255" required>.<input name="D1" type="number" class="s" min="0" max="255" required>.<input name="D2" type="number" class="s" min="0" max="255" required>.<input name="D3" type="number" class="s" min="0" max="255" required><br>
		<br>
		Adresa mDNS (lasa gol daca nu vrei):<br>
		http:// <input type="text" name="CM" maxlength="32"> .local<br>
		Client IP: <span class="sip"> Neconectat </span> <br>
		<h3>Configureaza AP</h3>
		AP SSID (Lasa gol daca nu vrei):<br> <input type="text" name="AS" maxlength="32"><br>
		Ascunde AP: <input type="checkbox" name="AH"><br>
		Parola AP (lasa gol pentru a folosi fara):<br> <input type="password" name="AP" maxlength="63" pattern="(.{8,63})|()" title="Gol sau min. 8 caractere"><br>
		Canal AP: <input name="AC" type="number" class="xs" min="1" max="13" required><br>
		AP se deschide:
		<select name="AB">
			<option value="0">Daca nu este conexiune</option>
			<option value="1">Deconectat</option>
			<option value="2">Mereu</option>
			<option value="3">Niciodata (nerecomandat)</option>
			<option value="4">Temporar (fara conexiune dupa pornire)</option>
		</select><br>
		AP IP: <span class="sip"> Nu e activ </span><br>

		
		<hr>
		<button type="button" onclick="B()">Inapoi</button><button type="submit">Salveaza & Conecteaza</button>
	</form>
</body>
</html>
